echo "kubectl-deploy-commands.conf START"

while getopts ":j:b:o:e:" opt; do
  case $opt in
    j)
        JOB_NAME="$OPTARG"
        ;;
    b)
        BUILD_NUMBER="$OPTARG"
        ;;
    o)
        DATA_ORG="$OPTARG"
        ;;
    e)
        ECR_TDV_UNITTESTING="$OPTARG"
        ;;
    \?)
        echo "Invalid option: -$OPTARG" 1>&2
        echo "Valid options:"
        echo "  -j: Job Name"
        echo "  -b: Build Number"
        echo "  -o: Data Organization"
        echo "  -e: TDV Unittesting ECR"
        exit 1
        ;;
    :)
        echo "Invalid argument: Option -$OPTARG missing argument" 1>&2
        exit 1
        ;;
    *)
  esac
done

if [ -z $JOB_NAME ];
then
  echo "Missing JOB_NAME" >&2
  exit 1
fi

if [ -z "$BUILD_NUMBER" ];
then
  echo "Missing BUILD_NUMBER" >&2
  exit 1
fi

if [ -z "$DATA_ORG" ];
then
  echo "Missing DATA_ORG" >&2
  exit 1
fi

if [ -z "$ECR_TDV_UNITTESTING" ];
then
  echo "Missing ECR_TDV_UNITTESTING" >&2
  exit 1
fi

JOB_NAME_HASH=($(echo $JOB_NAME | md5sum))
JOB_ID="${DATA_ORG}-${JOB_NAME_HASH}-${BUILD_NUMBER}"
IMAGE_TAG="${JOB_NAME}-${BUILD_NUMBER}"
echo "JOB_ID=${JOB_ID}"
echo "IMAGE_TAG=${IMAGE_TAG}"

source ./env.conf

#Prepare kubernetes deployment config from template
echo "Creating job deployment config for ${JOB_NAME}"
sed "s/%JOB_NAME%/${JOB_ID}/g;s/%ECR_TDV_UNITTESTING%/${ECR_TDV_UNITTESTING}/g;s/%AWS_FED_ACCOUNT%/${AWS_FED_ACCOUNT}/g;s/%IMAGE_TAG%/${IMAGE_TAG}/g;s/%DATA_ORG%/${DATA_ORG}/g" ./templates/template-tdv-unittest.job.yaml > ./resources/tdv-unittest.job.yaml
if [ $? -ne 0 ];
then
  echo "Error creating k8s job from template"
  exit 1
fi
cat ./resources/tdv-unittest.job.yaml

# Deploy secrets
echo "Deploying secrets"
kubectl config set-context --current --namespace=tdv
kubectl create secret generic "tdv-unittest-usr" --from-literal=TDV_UNITTEST_USR=${TDV_UNITTEST_USR} --dry-run -o yaml --save-config | kubectl apply -f -
kubectl create secret generic "tdv-unittest-psw" --from-literal=TDV_UNITTEST_PSW=${TDV_UNITTEST_PSW} --dry-run -o yaml --save-config | kubectl apply -f -

# Deploy resources
echo "Deploying resources"
kubectl apply -f ./resources/.


# Wait for job to complete/fail
echo "Waiting for ${JOB_ID} job completion..."
counter=0
check_limit=20 # number of checks to try before timing out

while [ $counter -lt $check_limit ]; do 
  echo "Checking job ${JOB_ID} condition=complete..."
  if (kubectl wait --for=condition=complete --timeout=0 job/${JOB_ID} 2>/dev/null);
  then
    job_result=0
    echo "COMPLETE"
    break
  fi
  echo "Checking job ${JOB_ID} condition=failed..."
  if (kubectl wait --for=condition=failed --timeout=0 job/${JOB_ID} 2>/dev/null);
  then
    job_result=1
    echo "FAILED"
    break
  fi
  echo "Sleep..."
  sleep 10
  let "counter+=1"
done


# Get pod logs
echo "Fetching pod logs..."
pods=$(kubectl get pods --selector=job-name=$JOB_ID -o jsonpath="{.items[?(@.metadata.labels.name==\"$JOB_ID\")].metadata.name}")

for p in $pods
do
    kubectl logs $p
done

echo "Finished fetching pod logs..."

# If while loop ran over the check_limit, timeout job
if [[ $counter -ge $check_limit ]]; 
then
  echo "job timeout. took too long to complete or fail"
  exit 1
fi

echo "kubectl-deploy-commands.conf DONE"
exit $job_result
